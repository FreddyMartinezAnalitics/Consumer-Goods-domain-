Right here, you will find the queries used in MySQL to retrieve information!



1. Provide the list of markets in which customer "Atliq Exclusive" operates its business in the APAC region.

                    SELECT DISTINCT market FROM dim_customer WHERE customer = 'atliq exclusive' AND region = 'APAC';


 2. What is the percentage of unique product increase in 2021 vs. 2020? The final output contains these fields, unique_products_2020 unique_products_2021 percentage_chg

                      WITH SalesCTE AS (
             SELECT DISTINCT product_code
             FROM fact_sales_monthly
           WHERE fiscal_year = '2020')
    SELECT
       (SELECT COUNT(*) FROM SalesCTE) AS unique_products_2020,
       (SELECT COUNT(DISTINCT product_code) FROM fact_sales_monthly WHERE fiscal_year = '2021') AS unique_products_2021,
       ((SELECT COUNT(DISTINCT product_code) FROM fact_sales_monthly WHERE fiscal_year = '2021') - (SELECT COUNT(*) FROM SalesCTE)) / (SELECT COUNT(*) FROM SalesCTE) * 100 AS percentage_chg;

3. Provide a report with all the unique product counts for each segment and sort them in descending order of product counts. The final output contains 2 fields, segment product_count

SELECT segment, count(DISTINCT product_code) AS product_count
FROM dim_product
GROUP BY segment
ORDER BY product_count DESC;


4.  Follow-up: Which segment had the most increase in unique products in 2021 vs 2020? The final output contains these fields, segment product_count_2020 product_count_2021 difference


        WITH temp_table AS (
    SELECT 
        p.segment,
        s.fiscal_year,
        COUNT(DISTINCT s.Product_code) as product_count
    FROM 
        fact_sales_monthly s
        JOIN dim_product p ON s.product_code = p.product_code
    GROUP BY 
        p.segment,
        s.fiscal_year
)
SELECT 
    up_2020.segment,
    up_2020.product_count as product_count_2020,
    up_2021.product_count as product_count_2021,
    up_2021.product_count - up_2020.product_count as difference
FROM 
    temp_table as up_2020
JOIN 
    temp_table as up_2021
ON 
    up_2020.segment = up_2021.segment
    AND up_2020.fiscal_year = 2020 
    AND up_2021.fiscal_year = 2021
ORDER BY 
    difference DESC


 5. Get the products that have the highest and lowest manufacturing costs. The final output should contain these fields, product_code product manufacturing_cost


  SELECT
    fm.product_code,
    CONCAT(dp.product, ' (', dp.variant, ')') AS specific_product_name,
    fm.cost_year,
    fm.manufacturing_cost
FROM
    fact_manufacturing_cost fm
JOIN
    dim_product dp ON fm.product_code = dp.product_code
WHERE
    fm.manufacturing_cost = (
        SELECT MAX(manufacturing_cost) FROM fact_manufacturing_cost
    )
    OR fm.manufacturing_cost = (
        SELECT MIN(manufacturing_cost) FROM fact_manufacturing_cost
    )
ORDER BY
    fm.manufacturing_cost DESC; 


6) Generate a report which contains the top 5 customers who received an average high pre_invoice_discount_pct for the fiscal year 2021 and in the Indian market. The final output contains these fields, customer_code customer average_discount_percentage 



SELECT
    fp.customer_code,
     MAX(dc.customer) AS customer , AVG(pre_invoice_discount_pct) AS average_discount_percentage
FROM
    fact_pre_invoice_deductions fp
JOIN
    dim_customer dc ON fp.customer_code = dc.customer_code
WHERE
    fiscal_year = "2021" AND market = "INDIA"
GROUP BY
    fp.customer_code
ORDER BY
    average_discount_percentage DESC
LIMIT 5; 




7. Get the complete report of the Gross sales amount for the customer “Atliq Exclusive” for each month . This analysis helps to get an idea of low and high-performing months and take strategic decisions. The final report contains these columns: Month Year Gross sales Amount  


WITH temp_table AS (
    SELECT
        customer,
        MONTHNAME(date) AS months,
        MONTH(date) AS month_number,
        YEAR(date) AS year,
        (sold_quantity * gross_price) AS gross_sales
    FROM
        fact_sales_monthly s
    JOIN
        fact_gross_price g ON s.product_code = g.product_code
    JOIN
        dim_customer c ON s.customer_code = c.customer_code
    WHERE
        customer = 'Atliq exclusive'
)
SELECT
    months,
    year,
    CONCAT(ROUND(SUM(gross_sales) / 1000000, 2), 'M') AS gross_sales
FROM
    temp_table
GROUP BY
    year, months, month_number
ORDER BY
    year, month_number;  


8. In which quarter of 2020, got the maximum total_sold_quantity? The final output contains these fields sorted by the total_sold_quantity, Quarter total_sold_quantity



WITH temp_table AS (
  SELECT date,month(date_add(date,interval 4 month)) AS period, fiscal_year,sold_quantity 
FROM fact_sales_monthly
)
SELECT CASE 
   when period/3 <= 1 then "Q1"
   when period/3 <= 2 and period/3 > 1 then "Q2"
   when period/3 <=3 and period/3 > 2 then "Q3"
   when period/3 <=4 and period/3 > 3 then "Q4" END quarter,
 round(sum(sold_quantity)/1000000,2) as total_sold_quantity_in_millions FROM temp_table
WHERE fiscal_year = 2020
GROUP BY quarter
ORDER BY total_sold_quantity_in_millions DESC ;


9) Which channel helped to bring more gross sales in the fiscal year 2021 and the percentage of contribution? The final output contains these fields, channel gross_sales_mln percentage


WITH cte1 AS (
    SELECT
        SUM(fcm.sold_quantity * fcp.gross_price) AS total_sales,
        dc.channel
    FROM
        fact_sales_monthly fcm
    JOIN
        fact_gross_price fcp ON fcm.product_code = fcp.product_code
    JOIN
        dim_customer dc ON fcm.customer_code = dc.customer_code
    WHERE
        fcm.fiscal_year = 2021
    GROUP BY
        dc.channel
)
SELECT
    cte1.channel,
    SUM(cte1.total_sales) / 1000000 AS gross_sales_mln,
    (SUM(cte1.total_sales) / (SELECT SUM(total_sales) FROM cte1)) * 100 AS percentage
FROM
    cte1
GROUP BY
    cte1.channel
ORDER BY
    gross_sales_mln DESC;

10. Get the Top 3 products in each division that have a high total_sold_quantity in the fiscal_year 2021? The final output contains these fields, division, product_code ,product , total_sold_quantity, rank_order



WITH temp_table AS (
SELECT
division,
s.product_code,
CONCAT (p.product, ' (', p.variant, ')') AS product,
SUM(s.sold_quantity) AS total_sold_quantity,
RANK() OVER (PARTITION BY division ORDER BY SUM(s.sold_quantity) DESC) AS rank_order
FROM

fact_sales_monthly s
JOIN
dim_product p ON s.product_code = p.product_code
WHERE
fiscal_year = 2021
GROUP BY
division, s.product_code, p.product, p.variant )

SELECT *
FROM temp_table
WHERE rank order IN (1, 2, 3);





